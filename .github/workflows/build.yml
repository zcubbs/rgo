name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          # Exclude Windows ARM64 as it's less common
          - goos: windows
            goarch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'
          cache: true

      - name: Build binary
        run: |
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -v -o bin/rgo-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }} .
        
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: rgo-${{ matrix.goos }}-${{ matrix.goarch }}
          path: bin/rgo-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}
          if-no-files-found: error

  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/rgo-linux-amd64/rgo-linux-amd64
            artifacts/rgo-linux-arm64/rgo-linux-arm64
            artifacts/rgo-windows-amd64/rgo-windows-amd64.exe
            artifacts/rgo-darwin-amd64/rgo-darwin-amd64
            artifacts/rgo-darwin-arm64/rgo-darwin-arm64
          draft: false
          prerelease: false
          generate_release_notes: true
